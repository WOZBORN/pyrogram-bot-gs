from datetime import datetime
import operator

from pyrogram import Client, filters
from pyrogram.types import Message

import config as cfg
import keyboards

import brawl_stars

app = Client(
    "gs_super_bot",
    api_id=cfg.API_ID,
    api_hash=cfg.API_HASH,
    bot_token=cfg.BOT_TOKEN
)


battle_tag = ""


@app.on_message(filters.command("start") | filters.regex("‚óÄÔ∏è–ù–∞–∑–∞–¥"))
async def start_command(client: Client, message: Message):
    await message.reply(
        "–û! –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –ø—Ä–∏–∫–∏–Ω—å?!\n",
        reply_markup=keyboards.main_keyboard
    )


@app.on_message(filters.command("help") | filters.regex("‚ùì–ü–æ–º–æ—â—å"))
async def help_command(client: Client, message: Message):
    await message.reply(
        "–Ø —É–º–µ—é:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã\n"
        "/date - –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–∞—Ç—É\n"
        "/calc - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
    )


@app.on_message(filters.command("battletag"))
async def battletag_command(client: Client, message: Message):
    content = message.text.split()
    if len(content) != 2:
        await message.reply(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫:\n"
            "/battletag #–¢–í–û–ô-–ë–ê–¢–¢–õ-–¢–≠–ì"
        )
        return
    global battle_tag
    battle_tag = content[1]
    await message.reply(f"–¢–≤–æ–π –±–∞—Ç—Ç–ª—Ç—ç–≥: {content[1]}")


@app.on_message(filters.command("brawler"))
async def brawler_command(client: Client, message: Message):
    content = message.text.split()
    if len(content) != 2:
        await message.reply(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞–ø–∏—Å–∞–ª. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫:\n"
            "/brawler Shelly"
        )
        return
    if battle_tag == "":
        await message.reply(
            "–ù–µ –∑–Ω–∞—é —Ç–≤–æ–π battletag. –ó–∞–¥–∞–π –µ–≥–æ —Ç–∞–∫:\n"
            "/battletag #–¢–í–û–ô-–ë–ê–¢–¢–õ-–¢–≠–ì"
        )
        return
    brawler_info = brawl_stars.brawler_info(battle_tag, content[1])
    await message.reply(brawler_info)


@app.on_message(filters.command("settings") | filters.regex("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏"))
async def settings_command(client: Client, message: Message):
    await message.reply(
        "–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫. –í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É.",
        reply_markup=keyboards.settings_keyboard
    )


@app.on_message(filters.command("date") | filters.regex("üóìÔ∏è–î–∞—Ç–∞"))
async def date_command(client: Client, message: Message):
    await message.reply(f"–°–µ–≥–æ–¥–Ω—è {datetime.now().strftime('%d.%m.%Y')}")


@app.on_message(filters.command("calc"))
async def calc_command(client: Client, message: Message):
    content = message.text.split()

    operators = {
        "+": operator.add,
        "-": operator.sub,
        "*": operator.mul,
        "/": operator.truediv
    }

    if len(content) != 4 or not content[1].isdigit() or not content[3].isdigit() or content[2] not in operators:
        await message.reply(
            "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–ø–∏—Å–∞–ª –ø—Ä–∏–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Ç–∞–∫–∏–µ:\n"
            "/calc 2 + 2\n"
            "/calc 2 * 2\n"
            "/calc 2 - 2\n"
            "/calc 2 / 2"
        )

    num1 = int(content[1])
    num2 = int(content[3])
    op = content[2]
    try:
        result = operators[op](num1, num2)
    except ZeroDivisionError:
        await message.reply("–ù–∞ –Ω–æ–ª—å –¥–µ–ª–∏—Ç—å –Ω–µ–ª—å–∑—è!")
        return

    await message.reply(f"{num1} {op} {num2} = {result}")


@app.on_message(filters.text)
async def echo(client: Client, message: Message):
    await message.reply(
        "–û–π, —Ç–∞–∫–æ–≥–æ —è –Ω–µ –∑–Ω–∞—é!\n"
        "–ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!"
    )

app.run()